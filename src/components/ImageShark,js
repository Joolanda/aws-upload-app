const AWS = require('aws-sdk');
const sharp = require('sharp');

// const s3 = new AWS.S3(); using S3Client instead, refactoring below
const { S3Client, CopyObjectCommand , PutObjectCommand} = require('@aws-sdk/client-s3')

const DEST_BUCKET ='sharky-bucket'
const REGION ='us-east-1';
const API_ACCESS = process.env.REACT_APP_ACCESS;
const API_SECRET = process.env.REACT_APP_SECRET;

AWS.config.update({
  accessKeyId: API_ACCESS,
  secretAccessKey: API_SECRET,
  region: REGION,
});

exports.handler = async(event) => {
    // Read data from event object.
    const region = event.Records[0].awsRegion
    const sourceBucket = event.Records[0].s3.bucket.name
    const sourceKey = event.Records[0].s3.object.key
 
    // Instantiate a new S3 client.
    const s3Client = new S3Client({
        region: region
    })

    // Create an object with parameters for CopyObjectCommand.
    // for refactoring later, using environmental variables Bucket: process.env.DEST_BUCKET,
   const copyObjectParams = {
    // Bucket: process.env.DEST_BUCKET,
    Bucket: DEST_BUCKET,
    Key: sourceKey,
    CopySource: `${sourceBucket}/${sourceKey}`
    }
    // Create a helper function to execute the copy operation. FInd other ways then promise chaining.
    // Create an object with parameters for putObjectCommand
    const putObjectParams = {
        Bucket: DEST_BUCKET,
        Key: sourceKey,
        CopySource: `${sourceBucket}/${sourceKey}`
    }
    const putObjectResult = await s3Client.send(new PutObjectCommand(putObjectParams));
    const copyObjectResult = await s3Client.send(new CopyObjectCommand(copyObjectParams));
  
    return { putObjectResult, copyObjectResult };
};